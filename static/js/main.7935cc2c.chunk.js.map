{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","abouttext","role","onClick","toggleMode","htmlFor","TextForm","findword","setfindword","useState","replaceword","setreplaceword","text","settext","words","setwords","CountWords","newarr","trim","split","length","toString","Fragment","style","color","heading","value","backgroundColor","onChange","event","target","rows","handleUpclick","newText","toUpperCase","showAlert","handleLowclick","newtext","toLowerCase","handlclearclick","handlereplaceword","arr","i","join","placeholder","e","Alert","alert","msg","App","SetAlert","message","setTimeout","SetMode","document","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7935cc2c.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\nexport default function Navbar(props) {\r\n   return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    {/* <Link className=\"navbar-brand\" to=\"#\">{props.title}</Link> */}\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/home\">Home</Link> */}\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/home\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link\" to=\"/about\">{props.abouttext}</Link> */}\r\n          <a className=\"nav-link\" href=\"/about\">{props.abouttext}</a>\r\n\r\n        </li>\r\n      </ul>\r\n      <form className=\"d-flex\" role=\"search\">\r\n        <div className= {`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n         <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  ) \r\n}\r\n// Navbar.defaultProps = {\r\n//   title : \"set title\",\r\n//   abouttext : \"set about\"\r\n// }\r\nNavbar.propTypes = {\r\n  title : PropTypes.string,\r\n  abouttext : PropTypes.string,\r\n  mode : PropTypes.string\r\n};","import React , { useState } from \"react\"\r\n\r\nexport default function TextForm(props) {\r\n    const [findword , setfindword]  = useState('');\r\n    const [replaceword , setreplaceword]  = useState('')\r\n    const [text, settext] = useState('');\r\n    const [words, setwords] = useState(0);\r\n    const handleOnchange=(event)=>{\r\n        settext(event.target.value);\r\n        CountWords();\r\n    };\r\n    const handleUpclick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        settext(newText);\r\n        props.showAlert(\"converted to upperCase\" , \"success\");\r\n    }\r\n    const handleLowclick=()=>{\r\n        let newtext = text.toLowerCase();\r\n        settext(newtext);\r\n       \r\n    }\r\n    const handlclearclick=()=>{ props.showAlert(\"converted to LowerCase\" , \"success\");\r\n        let newtext = '';\r\n        settext(newtext);\r\n        props.showAlert(\"Text cleared\" , \"success\");\r\n    }\r\n    const handlereplaceword=()=>{\r\n        let arr = text.split(' ');\r\n        for(let i = 0 ; i < arr.length ; i++){\r\n            if(arr[i]=== findword){\r\n                arr[i] = replaceword;\r\n            }\r\n        }\r\n        settext(arr.join(' '));\r\n        props.showAlert(\"Word Replaced\" , \"success\");\r\n    }\r\n    const CountWords = () => {\r\n        let newarr = text.trim().split(/\\s+/);\r\n        setwords(newarr.length === 1 && newarr[0] === \"\" ? \"0\" : newarr.length.toString());\r\n      };\r\n      \r\n    return (\r\n        <>\r\n          <div className=\"container\" style={{color: props.mode === 'light'? ' #042743' : 'white'}} >\r\n            <h1 style={{color: props.mode === 'light'? ' #042743' : 'white'}}>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                 <textarea className=\"form-control\" value={text} style={{backgroundColor: props.mode === 'light'? 'white' : '#061326' , color : props.mode === 'dark'?'white':' #042743'}} onChange={handleOnchange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className='btn btn-primary mx-2' onClick={handleUpclick}>Convert to UpperCase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleLowclick}>Convert to LowerCase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handlclearclick}>Clear text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'light'? ' #042743' : 'white'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{words} words and {text.length} characters</p>\r\n            <p>{0.008*text.split(\" \").length} Minutes to read this text</p>\r\n            <h2>preview</h2>\r\n            <p>{text.length>0?text:\"enter somthing in the above textbox to preview it here\"}</p>\r\n            <button className='btn btn-primary mx-2' onClick={handlereplaceword}>Replace Word</button>\r\n            <div className=\"my-3\" >\r\n            <input type=\"text\" placeholder=\"enter replaced\" value={findword} onChange={(e)=>setfindword(e.target.value)} className=\"mx-2\" id=\"t1\" style={{backgroundColor: props.mode === 'light'? 'white' : '#061326' , color : props.mode === 'dark'?'white':' #042743'}}/>\r\n            <input type=\"text\" placeholder=\"enter replacing\" value={replaceword} onChange={(e)=>setreplaceword(e.target.value)} className=\"mx-2\" id=\"t2\" style={{backgroundColor: props.mode === 'light'? 'white' : '#061326' , color : props.mode === 'dark'?'white':' #042743'}}/>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}   \r\n","import React from 'react';\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    props.alert &&(\r\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{props.alert.msg}</strong>\r\n       </div>\r\n  ))\r\n}\r\n\r\nexport default Alert;\r\n\r\n","// import logo from './logo.svg';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\n import Navbar from './Components/Navbar';\r\n// import About from './Components/About';\r\nimport TextForm from './Components/TextForm';\r\nimport Alert from './Components/Alert';\r\nimport React,{ useState } from 'react';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Routes,\r\n//   Route,\r\n  \r\n// } from \"react-router-dom\";\r\n function App() {\r\n  const [alert , SetAlert] = useState(null);  \r\n  const showAlert = (message , type)=>{ \r\n    SetAlert({\r\n      msg : message,\r\n      type : type\r\n    })\r\n    setTimeout(() => {\r\n      SetAlert(null);\r\n    }, 1500);\r\n  }\r\n  const [mode , SetMode] = useState('light');  \r\n  const toggleMode = ()=>{\r\n    if(mode === 'light'){\r\n      SetMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark Mode is Enabled\" , \"success\")\r\n    }\r\n    else{\r\n      SetMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light Mode is Enabled\" , \"primary\")\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Navbar title=\"TextUtils\" abouttext=\"About Us\" mode={mode} toggleMode={toggleMode} />\r\n      <Alert alert={alert} />\r\n      <div className=\"container my-3\">\r\n        <TextForm heading=\"Enter the text to analyze\" mode={mode} showAlert={showAlert} />\r\n      </div>\r\n     </>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}